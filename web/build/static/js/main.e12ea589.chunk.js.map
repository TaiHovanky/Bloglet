{"version":3,"sources":["generated/graphql.tsx","components/splash-page/index.tsx","types/user.interface.ts","utils/cache-modification.util.ts","cache.ts","components/follow-button/index.tsx","components/user-follows/index.tsx","containers/user-follows-container/index.tsx","components/post-input/index.tsx","containers/post-input-container/index.tsx","components/like-button/index.tsx","containers/like-button-container/index.tsx","components/comment-list/index.tsx","containers/comment-list-container/index.tsx","components/comment-input/index.tsx","containers/comment-input-container/index.tsx","components/post-menu/index.tsx","containers/post-menu-container/index.tsx","components/post/index.tsx","components/post-list/index.tsx","hooks/use-scroll.hook.ts","cache-queries/clear-user-posts.ts","containers/post-list-container/index.tsx","pages/home/index.tsx","utils/text-field-validation.util.ts","hooks/use-form-field.hook.ts","utils/email-field-validation.util.ts","pages/register/index.tsx","pages/login/index.tsx","pages/profile/index.tsx","components/logout/index.tsx","containers/logout-container/index.tsx","components/navbar/index.tsx","components/primary-app-bar/index.tsx","containers/primary-app-bar-container/index.tsx","Routes.tsx","index.tsx"],"names":["defaultOptions","CreateCommentDocument","gql","_templateObject","_taggedTemplateLiteral","CreatePostDocument","_templateObject2","DeletePostDocument","_templateObject3","FollowUserDocument","_templateObject4","GetFollowersDocument","_templateObject5","GetFollowingDocument","_templateObject6","GetUserPostsDocument","_templateObject7","HomePageDocument","_templateObject8","LikeCommentDocument","_templateObject9","LikePostDocument","_templateObject10","LoginDocument","_templateObject11","LogoutDocument","_templateObject12","RegisterDocument","_templateObject13","SearchUsersDocument","_templateObject14","useStyles","makeStyles","theme","homePaper","margin","spacing","paddingBottom","paddingTop","homePageText","marginTop","SplashPage","classes","_jsx","_Fragment","children","Paper","elevation","className","_jsxs","Container","maxWidth","Typography","variant","User","_createClass","id","email","firstName","lastName","_classCallCheck","this","updatePosts","posts","propertyToBeUpdated","data","isUpdatingCommentLikes","updatedPosts","_toConsumableArray","updatedPostIndex","updatedPost","forEach","post","index","_objectSpread","likes","updatedComments","comments","likedCommentIndex","findIndex","comment","splice","updateComments","readGetUserPostsQuery","cache","userId","readQuery","query","variables","getItemIdentifier","item","__ref","refNumber","replace","parseInt","currentUserProfileVar","makeVar","currentGetUserPostsCursorVar","loggedInUserProfileVar","InMemoryCache","typePolicies","Query","fields","currentUserProfile","read","currentGetUserPostsCursor","getUserPosts","keyArgs","merge","existing","arguments","length","undefined","incoming","args","existingIdMap","hasDuplicates","existingItem","incomingItem","checkForDuplicateItems","concat","getFollowers","getFollowing","Post","sort","a","b","Comment","FollowButton","_ref","followers","loggedInUser","loading","handleFollowUser","isLoggedInUserFollowing","some","follower","Button","color","onClick","disabled","UserFollows","_following$getFollowi","_followers$getFollowe","following","followerLoading","followingLoading","Grid","container","xs","UserFollowsContainer","userToBeFollowed","useReactiveVar","_useGetFollowingQuery","baseOptions","options","Apollo","useGetFollowingQuery","fetchPolicy","followingData","_useGetFollowersQuery","useGetFollowersQuery","followerData","_useMutation","useMutation","update","modify","existingFollowers","oldFollowers","followUser","unfollowedIndex","follow","_useMutation2","_slicedToArray","isAlreadyFollowing","newPostPaper","newPostTextField","width","submitBtn","PostInput","props","_useState","useState","_useState2","postContent","setPostContent","clearForm","noWrap","noValidate","autoComplete","onSubmit","e","handleCreatePost","TextField","label","name","multiline","value","onChange","target","type","PostInputContainer","createPost","_asyncToGenerator","_regeneratorRuntime","mark","_callee","callback","formData","wrap","_context","prev","next","preventDefault","FormData","creatorId","content","get","stop","_x","_x2","apply","LikeButton","isAlreadyLiked","handleLikeButtonClick","IconButton","size","ThumbUp","ThumbUpOutlined","LikeButtonContainer","likeMutation","like","user","root","minWidth","commentCreator","cursor","inline","display","marginBottom","commentCreatedAt","CommentList","likeComment","handleItemCreatorClick","List","map","ListItem","alignItems","ListItemText","secondary","React","Fragment","component","createdAt","CommentListContainer","_ref2","commentId","CommentInput","handleCreateComment","setComment","fullWidth","CommentInputContainer","postId","createComment","_ref3","Date","toLocaleString","_x3","StyledMenu","withStyles","paper","border","Menu","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","PostMenu","deletePost","_React$useState","_React$useState2","anchorEl","setAnchorEl","handleClose","event","currentTarget","MoreHoriz","keepMounted","open","Boolean","onClose","MenuItem","ListItemIcon","Delete","fontSize","primary","PostMenuContainer","filter","postCreator","likePost","showCommentInput","setShowCommentInput","Card","CardContent","CommentOutlined","PostList","SCROLL_DIRECTION_DOWN","clearUserPosts","PostListContainer","isGettingNewsfeed","history","useHistory","_useQuery","useQuery","offsetLimit","skip","onError","err","console","log","postsData","postsLoading","fetchMore","window","pageYOffset","lastYPosition","setLastYPosition","handleScroll","direction","useEffect","addEventListener","removeEventListener","useScrollDirection","scrollDirection","scrollY","innerHeight","document","documentElement","scrollHeight","_useMutation3","clearPosts","push","homePageContainer","minHeight","currentUserInfoContainer","backdrop","zIndex","drawer","Home","_useHomePageLazyQuery","useHomePageLazyQuery","onCompleted","homePage","_data$homePage","newUser","__typename","_objectWithoutProperties","_excluded","_useHomePageLazyQuery2","homePageQueryExecutor","_useHomePageLazyQuery3","userData","_useLazyQuery","useLazyQuery","_useLazyQuery2","Backdrop","CircularProgress","validateRequiredTextField","isValidField","useFormField","initialValue","fieldType","setValue","_useState3","_useState4","error","setError","useCallback","isEmailValid","match","validateEmailField","registerPageContainer","height","registerPaper","paddingLeft","paddingRight","textField","errorAlert","backgroundColor","Register","password","errors","setErrors","_useRegisterMutation","useRegisterMutation","register","handleSubmit","response","sent","message","Snackbar","loginPageContainer","loginPaper","Login","_useLoginMutation","useLoginMutation","login","Profile","logoutItemText","fontWeight","Logout","handleLogoutClick","button","LogoutContainer","_useLogoutMutation","useLogoutMutation","_useLogoutMutation2","logout","client","resetStore","flexShrink","drawerPaper","toolbar","mixins","menuIcon","fill","menuItemText","NavBar","handleHomePageClick","isNavDrawerOpen","setIsNavDrawerOpen","toggleDrawer","Drawer","anchor","Divider","Link","to","_title","grow","flexGrow","menuButton","marginRight","title","_defineProperty","breakpoints","up","search","position","borderRadius","shape","alpha","palette","common","white","marginLeft","searchIcon","padding","pointerEvents","justifyContent","inputRoot","inputInput","transition","transitions","create","sectionDesktop","PrimaryAppBar","handleMenuClick","searchUsers","setOpen","anchorRef","useRef","handleListKeyDown","key","AppBar","Toolbar","Search","InputBase","placeholder","input","inputProps","ref","Popper","current","role","disablePortal","style","offsetWidth","_data$searchUsers","TransitionProps","placement","Grow","ClickAwayListener","onClickAway","MenuList","onKeyDown","PrimaryAppBarContainer","_useSearchUsersLazyQu","useSearchUsersLazyQuery","_useSearchUsersLazyQu2","setTimeout","background","default","Routes","BrowserRouter","Switch","Route","exact","path","httpLink","createHttpLink","uri","credentials","errorLink","graphQLErrors","networkError","locations","ApolloClient","link","from","ReactDOM","render","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.e12ea589.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\nimport * as Apollo from '@apollo/client';\r\nexport type Maybe<T> = T | null;\r\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\r\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\r\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\r\nconst defaultOptions =  {}\r\n/** All built-in and custom scalars, mapped to their actual values */\r\nexport type Scalars = {\r\n  ID: string;\r\n  String: string;\r\n  Boolean: boolean;\r\n  Int: number;\r\n  Float: number;\r\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\r\n  DateTime: any;\r\n};\r\n\r\nexport type Comment = {\r\n  __typename?: 'Comment';\r\n  id: Scalars['Float'];\r\n  comment: Scalars['String'];\r\n  createdAt: Scalars['String'];\r\n  user?: Maybe<User>;\r\n  post?: Maybe<Post>;\r\n  likes?: Maybe<Array<CommentLike>>;\r\n};\r\n\r\nexport type CommentLike = {\r\n  __typename?: 'CommentLike';\r\n  id: Scalars['Float'];\r\n  user?: Maybe<User>;\r\n  comment?: Maybe<Comment>;\r\n};\r\n\r\n\r\nexport type FieldError = {\r\n  __typename?: 'FieldError';\r\n  field: Scalars['String'];\r\n  message: Scalars['String'];\r\n};\r\n\r\nexport type Follows = {\r\n  __typename?: 'Follows';\r\n  id: Scalars['Float'];\r\n  follower?: Maybe<User>;\r\n  following?: Maybe<User>;\r\n};\r\n\r\nexport type Mutation = {\r\n  __typename?: 'Mutation';\r\n  register: UserResponse;\r\n  login: UserResponse;\r\n  logout: Scalars['Boolean'];\r\n  createPost?: Maybe<Post>;\r\n  likePost?: Maybe<Post>;\r\n  deletePost?: Maybe<Scalars['Boolean']>;\r\n  followUser?: Maybe<Follows>;\r\n  createComment?: Maybe<Post>;\r\n  likeComment?: Maybe<Comment>;\r\n};\r\n\r\n\r\nexport type MutationRegisterArgs = {\r\n  password: Scalars['String'];\r\n  email: Scalars['String'];\r\n  lastName: Scalars['String'];\r\n  firstName: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationLoginArgs = {\r\n  password: Scalars['String'];\r\n  email: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationCreatePostArgs = {\r\n  content: Scalars['String'];\r\n  creatorId: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationLikePostArgs = {\r\n  isAlreadyLiked: Scalars['Boolean'];\r\n  userId: Scalars['Float'];\r\n  postId: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationDeletePostArgs = {\r\n  postId: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationFollowUserArgs = {\r\n  isAlreadyFollowing: Scalars['Boolean'];\r\n  userToBeFollowed: Scalars['Float'];\r\n  loggedInUser: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationCreateCommentArgs = {\r\n  createdAt: Scalars['String'];\r\n  comment: Scalars['String'];\r\n  postId: Scalars['Float'];\r\n  userId: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type MutationLikeCommentArgs = {\r\n  isAlreadyLiked: Scalars['Boolean'];\r\n  commentId: Scalars['Float'];\r\n  userId: Scalars['Float'];\r\n};\r\n\r\nexport type Post = {\r\n  __typename?: 'Post';\r\n  id: Scalars['Float'];\r\n  content?: Maybe<Scalars['String']>;\r\n  creatorId: Scalars['Float'];\r\n  createdAt?: Maybe<Scalars['DateTime']>;\r\n  likes?: Maybe<Array<PostLike>>;\r\n  comments?: Maybe<Array<Comment>>;\r\n  user?: Maybe<User>;\r\n};\r\n\r\nexport type PostLike = {\r\n  __typename?: 'PostLike';\r\n  id: Scalars['Float'];\r\n  post: Post;\r\n  user: User;\r\n};\r\n\r\nexport type Query = {\r\n  __typename?: 'Query';\r\n  users: Array<User>;\r\n  homePage?: Maybe<User>;\r\n  searchUsers?: Maybe<Array<User>>;\r\n  getUserPosts?: Maybe<Array<Post>>;\r\n  getPost: Post;\r\n  getFollowers?: Maybe<Array<Follows>>;\r\n  getFollowing?: Maybe<Array<Follows>>;\r\n};\r\n\r\n\r\nexport type QuerySearchUsersArgs = {\r\n  name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QueryGetUserPostsArgs = {\r\n  isGettingNewsfeed: Scalars['Boolean'];\r\n  offsetLimit: Scalars['Float'];\r\n  cursor: Scalars['Float'];\r\n  userId: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetPostArgs = {\r\n  postId: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetFollowersArgs = {\r\n  userId: Scalars['Float'];\r\n};\r\n\r\n\r\nexport type QueryGetFollowingArgs = {\r\n  userId: Scalars['Float'];\r\n};\r\n\r\nexport type User = {\r\n  __typename?: 'User';\r\n  id: Scalars['Float'];\r\n  firstName: Scalars['String'];\r\n  lastName: Scalars['String'];\r\n  email: Scalars['String'];\r\n  likedPosts?: Maybe<Array<PostLike>>;\r\n  following?: Maybe<Array<Follows>>;\r\n  followers?: Maybe<Array<Follows>>;\r\n  comments?: Maybe<Array<Comment>>;\r\n  likedComments?: Maybe<Array<CommentLike>>;\r\n  posts?: Maybe<Array<Post>>;\r\n};\r\n\r\nexport type UserResponse = {\r\n  __typename?: 'UserResponse';\r\n  errors?: Maybe<Array<FieldError>>;\r\n  user?: Maybe<User>;\r\n};\r\n\r\nexport type CreateCommentMutationVariables = Exact<{\r\n  userId: Scalars['Float'];\r\n  postId: Scalars['Float'];\r\n  comment: Scalars['String'];\r\n  createdAt: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type CreateCommentMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { createComment?: Maybe<(\r\n    { __typename?: 'Post' }\r\n    & Pick<Post, 'id' | 'content' | 'createdAt'>\r\n    & { user?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\r\n    )>, likes?: Maybe<Array<(\r\n      { __typename?: 'PostLike' }\r\n      & { user: (\r\n        { __typename?: 'User' }\r\n        & Pick<User, 'id'>\r\n      ) }\r\n    )>>, comments?: Maybe<Array<(\r\n      { __typename?: 'Comment' }\r\n      & Pick<Comment, 'id' | 'comment' | 'createdAt'>\r\n      & { likes?: Maybe<Array<(\r\n        { __typename?: 'CommentLike' }\r\n        & Pick<CommentLike, 'id'>\r\n        & { user?: Maybe<(\r\n          { __typename?: 'User' }\r\n          & Pick<User, 'id'>\r\n        )> }\r\n      )>>, user?: Maybe<(\r\n        { __typename?: 'User' }\r\n        & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\r\n      )>, post?: Maybe<(\r\n        { __typename?: 'Post' }\r\n        & Pick<Post, 'id'>\r\n      )> }\r\n    )>> }\r\n  )> }\r\n);\r\n\r\nexport type CreatePostMutationVariables = Exact<{\r\n  creatorId: Scalars['Float'];\r\n  content: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type CreatePostMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { createPost?: Maybe<(\r\n    { __typename?: 'Post' }\r\n    & Pick<Post, 'id' | 'content' | 'createdAt'>\r\n    & { user?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\r\n    )>, likes?: Maybe<Array<(\r\n      { __typename?: 'PostLike' }\r\n      & { user: (\r\n        { __typename?: 'User' }\r\n        & Pick<User, 'id'>\r\n      ) }\r\n    )>>, comments?: Maybe<Array<(\r\n      { __typename?: 'Comment' }\r\n      & Pick<Comment, 'id' | 'comment' | 'createdAt'>\r\n      & { likes?: Maybe<Array<(\r\n        { __typename?: 'CommentLike' }\r\n        & Pick<CommentLike, 'id'>\r\n        & { user?: Maybe<(\r\n          { __typename?: 'User' }\r\n          & Pick<User, 'id'>\r\n        )> }\r\n      )>>, user?: Maybe<(\r\n        { __typename?: 'User' }\r\n        & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\r\n      )>, post?: Maybe<(\r\n        { __typename?: 'Post' }\r\n        & Pick<Post, 'id'>\r\n      )> }\r\n    )>> }\r\n  )> }\r\n);\r\n\r\nexport type DeletePostMutationVariables = Exact<{\r\n  postId: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type DeletePostMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'deletePost'>\r\n);\r\n\r\nexport type FollowUserMutationVariables = Exact<{\r\n  userToBeFollowed: Scalars['Float'];\r\n  loggedInUser: Scalars['Float'];\r\n  isAlreadyFollowing: Scalars['Boolean'];\r\n}>;\r\n\r\n\r\nexport type FollowUserMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { followUser?: Maybe<(\r\n    { __typename?: 'Follows' }\r\n    & Pick<Follows, 'id'>\r\n    & { follower?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & Pick<User, 'id' | 'firstName' | 'lastName'>\r\n    )> }\r\n  )> }\r\n);\r\n\r\nexport type GetFollowersQueryVariables = Exact<{\r\n  userId: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetFollowersQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getFollowers?: Maybe<Array<(\r\n    { __typename?: 'Follows' }\r\n    & Pick<Follows, 'id'>\r\n    & { follower?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & Pick<User, 'id' | 'firstName' | 'lastName'>\r\n    )> }\r\n  )>> }\r\n);\r\n\r\nexport type GetFollowingQueryVariables = Exact<{\r\n  userId: Scalars['Float'];\r\n}>;\r\n\r\n\r\nexport type GetFollowingQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getFollowing?: Maybe<Array<(\r\n    { __typename?: 'Follows' }\r\n    & { following?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & Pick<User, 'id' | 'firstName' | 'lastName'>\r\n    )> }\r\n  )>> }\r\n);\r\n\r\nexport type GetUserPostsQueryVariables = Exact<{\r\n  userId: Scalars['Float'];\r\n  cursor: Scalars['Float'];\r\n  offsetLimit: Scalars['Float'];\r\n  isGettingNewsfeed: Scalars['Boolean'];\r\n}>;\r\n\r\n\r\nexport type GetUserPostsQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getUserPosts?: Maybe<Array<(\r\n    { __typename?: 'Post' }\r\n    & Pick<Post, 'id' | 'content' | 'createdAt'>\r\n    & { user?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\r\n    )>, likes?: Maybe<Array<(\r\n      { __typename?: 'PostLike' }\r\n      & { user: (\r\n        { __typename?: 'User' }\r\n        & Pick<User, 'id'>\r\n      ) }\r\n    )>>, comments?: Maybe<Array<(\r\n      { __typename?: 'Comment' }\r\n      & Pick<Comment, 'id' | 'comment' | 'createdAt'>\r\n      & { likes?: Maybe<Array<(\r\n        { __typename?: 'CommentLike' }\r\n        & Pick<CommentLike, 'id'>\r\n        & { user?: Maybe<(\r\n          { __typename?: 'User' }\r\n          & Pick<User, 'id'>\r\n        )> }\r\n      )>>, user?: Maybe<(\r\n        { __typename?: 'User' }\r\n        & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\r\n      )>, post?: Maybe<(\r\n        { __typename?: 'Post' }\r\n        & Pick<Post, 'id'>\r\n      )> }\r\n    )>> }\r\n  )>> }\r\n);\r\n\r\nexport type HomePageQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type HomePageQuery = (\r\n  { __typename?: 'Query' }\r\n  & { homePage?: Maybe<(\r\n    { __typename?: 'User' }\r\n    & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\r\n  )> }\r\n);\r\n\r\nexport type LikeCommentMutationVariables = Exact<{\r\n  userId: Scalars['Float'];\r\n  commentId: Scalars['Float'];\r\n  isAlreadyLiked: Scalars['Boolean'];\r\n}>;\r\n\r\n\r\nexport type LikeCommentMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { likeComment?: Maybe<(\r\n    { __typename?: 'Comment' }\r\n    & Pick<Comment, 'id' | 'comment' | 'createdAt'>\r\n    & { likes?: Maybe<Array<(\r\n      { __typename?: 'CommentLike' }\r\n      & Pick<CommentLike, 'id'>\r\n      & { user?: Maybe<(\r\n        { __typename?: 'User' }\r\n        & Pick<User, 'id'>\r\n      )> }\r\n    )>>, user?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\r\n    )>, post?: Maybe<(\r\n      { __typename?: 'Post' }\r\n      & Pick<Post, 'id'>\r\n    )> }\r\n  )> }\r\n);\r\n\r\nexport type LikePostMutationVariables = Exact<{\r\n  userId: Scalars['Float'];\r\n  postId: Scalars['Float'];\r\n  isAlreadyLiked: Scalars['Boolean'];\r\n}>;\r\n\r\n\r\nexport type LikePostMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { likePost?: Maybe<(\r\n    { __typename?: 'Post' }\r\n    & Pick<Post, 'id' | 'content' | 'createdAt'>\r\n    & { user?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\r\n    )>, likes?: Maybe<Array<(\r\n      { __typename?: 'PostLike' }\r\n      & { user: (\r\n        { __typename?: 'User' }\r\n        & Pick<User, 'id'>\r\n      ) }\r\n    )>> }\r\n  )> }\r\n);\r\n\r\nexport type LoginMutationVariables = Exact<{\r\n  email: Scalars['String'];\r\n  password: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type LoginMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { login: (\r\n    { __typename?: 'UserResponse' }\r\n    & { user?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & Pick<User, 'id' | 'email' | 'firstName' | 'lastName'>\r\n    )>, errors?: Maybe<Array<(\r\n      { __typename?: 'FieldError' }\r\n      & Pick<FieldError, 'field' | 'message'>\r\n    )>> }\r\n  ) }\r\n);\r\n\r\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type LogoutMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'logout'>\r\n);\r\n\r\nexport type RegisterMutationVariables = Exact<{\r\n  firstName: Scalars['String'];\r\n  lastName: Scalars['String'];\r\n  email: Scalars['String'];\r\n  password: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type RegisterMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { register: (\r\n    { __typename?: 'UserResponse' }\r\n    & { user?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & Pick<User, 'id' | 'email'>\r\n    )>, errors?: Maybe<Array<(\r\n      { __typename?: 'FieldError' }\r\n      & Pick<FieldError, 'field' | 'message'>\r\n    )>> }\r\n  ) }\r\n);\r\n\r\nexport type SearchUsersQueryVariables = Exact<{\r\n  name: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type SearchUsersQuery = (\r\n  { __typename?: 'Query' }\r\n  & { searchUsers?: Maybe<Array<(\r\n    { __typename?: 'User' }\r\n    & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\r\n  )>> }\r\n);\r\n\r\n\r\nexport const CreateCommentDocument = gql`\r\n    mutation CreateComment($userId: Float!, $postId: Float!, $comment: String!, $createdAt: String!) {\r\n  createComment(\r\n    userId: $userId\r\n    postId: $postId\r\n    comment: $comment\r\n    createdAt: $createdAt\r\n  ) {\r\n    id\r\n    content\r\n    createdAt\r\n    user {\r\n      id\r\n      firstName\r\n      lastName\r\n      email\r\n    }\r\n    likes {\r\n      user {\r\n        id\r\n      }\r\n    }\r\n    comments {\r\n      id\r\n      comment\r\n      createdAt\r\n      likes {\r\n        id\r\n        user {\r\n          id\r\n        }\r\n      }\r\n      user {\r\n        id\r\n        firstName\r\n        lastName\r\n        email\r\n      }\r\n      post {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n    `;\r\nexport type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;\r\n\r\n/**\r\n * __useCreateCommentMutation__\r\n *\r\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\r\n *   variables: {\r\n *      userId: // value for 'userId'\r\n *      postId: // value for 'postId'\r\n *      comment: // value for 'comment'\r\n *      createdAt: // value for 'createdAt'\r\n *   },\r\n * });\r\n */\r\nexport function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, options);\r\n      }\r\nexport type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;\r\nexport type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;\r\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;\r\nexport const CreatePostDocument = gql`\r\n    mutation CreatePost($creatorId: Float!, $content: String!) {\r\n  createPost(creatorId: $creatorId, content: $content) {\r\n    id\r\n    content\r\n    createdAt\r\n    user {\r\n      id\r\n      firstName\r\n      lastName\r\n      email\r\n    }\r\n    likes {\r\n      user {\r\n        id\r\n      }\r\n    }\r\n    comments {\r\n      id\r\n      comment\r\n      createdAt\r\n      likes {\r\n        id\r\n        user {\r\n          id\r\n        }\r\n      }\r\n      user {\r\n        id\r\n        firstName\r\n        lastName\r\n        email\r\n      }\r\n      post {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n    `;\r\nexport type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\r\n\r\n/**\r\n * __useCreatePostMutation__\r\n *\r\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\r\n *   variables: {\r\n *      creatorId: // value for 'creatorId'\r\n *      content: // value for 'content'\r\n *   },\r\n * });\r\n */\r\nexport function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, options);\r\n      }\r\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\r\nexport type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;\r\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\r\nexport const DeletePostDocument = gql`\r\n    mutation DeletePost($postId: Float!) {\r\n  deletePost(postId: $postId)\r\n}\r\n    `;\r\nexport type DeletePostMutationFn = Apollo.MutationFunction<DeletePostMutation, DeletePostMutationVariables>;\r\n\r\n/**\r\n * __useDeletePostMutation__\r\n *\r\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\r\n *   variables: {\r\n *      postId: // value for 'postId'\r\n *   },\r\n * });\r\n */\r\nexport function useDeletePostMutation(baseOptions?: Apollo.MutationHookOptions<DeletePostMutation, DeletePostMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<DeletePostMutation, DeletePostMutationVariables>(DeletePostDocument, options);\r\n      }\r\nexport type DeletePostMutationHookResult = ReturnType<typeof useDeletePostMutation>;\r\nexport type DeletePostMutationResult = Apollo.MutationResult<DeletePostMutation>;\r\nexport type DeletePostMutationOptions = Apollo.BaseMutationOptions<DeletePostMutation, DeletePostMutationVariables>;\r\nexport const FollowUserDocument = gql`\r\n    mutation FollowUser($userToBeFollowed: Float!, $loggedInUser: Float!, $isAlreadyFollowing: Boolean!) {\r\n  followUser(\r\n    userToBeFollowed: $userToBeFollowed\r\n    loggedInUser: $loggedInUser\r\n    isAlreadyFollowing: $isAlreadyFollowing\r\n  ) {\r\n    id\r\n    follower {\r\n      id\r\n      firstName\r\n      lastName\r\n    }\r\n  }\r\n}\r\n    `;\r\nexport type FollowUserMutationFn = Apollo.MutationFunction<FollowUserMutation, FollowUserMutationVariables>;\r\n\r\n/**\r\n * __useFollowUserMutation__\r\n *\r\n * To run a mutation, you first call `useFollowUserMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useFollowUserMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [followUserMutation, { data, loading, error }] = useFollowUserMutation({\r\n *   variables: {\r\n *      userToBeFollowed: // value for 'userToBeFollowed'\r\n *      loggedInUser: // value for 'loggedInUser'\r\n *      isAlreadyFollowing: // value for 'isAlreadyFollowing'\r\n *   },\r\n * });\r\n */\r\nexport function useFollowUserMutation(baseOptions?: Apollo.MutationHookOptions<FollowUserMutation, FollowUserMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<FollowUserMutation, FollowUserMutationVariables>(FollowUserDocument, options);\r\n      }\r\nexport type FollowUserMutationHookResult = ReturnType<typeof useFollowUserMutation>;\r\nexport type FollowUserMutationResult = Apollo.MutationResult<FollowUserMutation>;\r\nexport type FollowUserMutationOptions = Apollo.BaseMutationOptions<FollowUserMutation, FollowUserMutationVariables>;\r\nexport const GetFollowersDocument = gql`\r\n    query GetFollowers($userId: Float!) {\r\n  getFollowers(userId: $userId) {\r\n    id\r\n    follower {\r\n      id\r\n      firstName\r\n      lastName\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetFollowersQuery__\r\n *\r\n * To run a query within a React component, call `useGetFollowersQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetFollowersQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetFollowersQuery({\r\n *   variables: {\r\n *      userId: // value for 'userId'\r\n *   },\r\n * });\r\n */\r\nexport function useGetFollowersQuery(baseOptions: Apollo.QueryHookOptions<GetFollowersQuery, GetFollowersQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<GetFollowersQuery, GetFollowersQueryVariables>(GetFollowersDocument, options);\r\n      }\r\nexport function useGetFollowersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFollowersQuery, GetFollowersQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<GetFollowersQuery, GetFollowersQueryVariables>(GetFollowersDocument, options);\r\n        }\r\nexport type GetFollowersQueryHookResult = ReturnType<typeof useGetFollowersQuery>;\r\nexport type GetFollowersLazyQueryHookResult = ReturnType<typeof useGetFollowersLazyQuery>;\r\nexport type GetFollowersQueryResult = Apollo.QueryResult<GetFollowersQuery, GetFollowersQueryVariables>;\r\nexport const GetFollowingDocument = gql`\r\n    query GetFollowing($userId: Float!) {\r\n  getFollowing(userId: $userId) {\r\n    following {\r\n      id\r\n      firstName\r\n      lastName\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetFollowingQuery__\r\n *\r\n * To run a query within a React component, call `useGetFollowingQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetFollowingQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetFollowingQuery({\r\n *   variables: {\r\n *      userId: // value for 'userId'\r\n *   },\r\n * });\r\n */\r\nexport function useGetFollowingQuery(baseOptions: Apollo.QueryHookOptions<GetFollowingQuery, GetFollowingQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<GetFollowingQuery, GetFollowingQueryVariables>(GetFollowingDocument, options);\r\n      }\r\nexport function useGetFollowingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFollowingQuery, GetFollowingQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<GetFollowingQuery, GetFollowingQueryVariables>(GetFollowingDocument, options);\r\n        }\r\nexport type GetFollowingQueryHookResult = ReturnType<typeof useGetFollowingQuery>;\r\nexport type GetFollowingLazyQueryHookResult = ReturnType<typeof useGetFollowingLazyQuery>;\r\nexport type GetFollowingQueryResult = Apollo.QueryResult<GetFollowingQuery, GetFollowingQueryVariables>;\r\nexport const GetUserPostsDocument = gql`\r\n    query GetUserPosts($userId: Float!, $cursor: Float!, $offsetLimit: Float!, $isGettingNewsfeed: Boolean!) {\r\n  getUserPosts(\r\n    userId: $userId\r\n    cursor: $cursor\r\n    offsetLimit: $offsetLimit\r\n    isGettingNewsfeed: $isGettingNewsfeed\r\n  ) {\r\n    id\r\n    content\r\n    createdAt\r\n    user {\r\n      id\r\n      firstName\r\n      lastName\r\n      email\r\n    }\r\n    likes {\r\n      user {\r\n        id\r\n      }\r\n    }\r\n    comments {\r\n      id\r\n      comment\r\n      createdAt\r\n      likes {\r\n        id\r\n        user {\r\n          id\r\n        }\r\n      }\r\n      user {\r\n        id\r\n        firstName\r\n        lastName\r\n        email\r\n      }\r\n      post {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useGetUserPostsQuery__\r\n *\r\n * To run a query within a React component, call `useGetUserPostsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useGetUserPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useGetUserPostsQuery({\r\n *   variables: {\r\n *      userId: // value for 'userId'\r\n *      cursor: // value for 'cursor'\r\n *      offsetLimit: // value for 'offsetLimit'\r\n *      isGettingNewsfeed: // value for 'isGettingNewsfeed'\r\n *   },\r\n * });\r\n */\r\nexport function useGetUserPostsQuery(baseOptions: Apollo.QueryHookOptions<GetUserPostsQuery, GetUserPostsQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<GetUserPostsQuery, GetUserPostsQueryVariables>(GetUserPostsDocument, options);\r\n      }\r\nexport function useGetUserPostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserPostsQuery, GetUserPostsQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<GetUserPostsQuery, GetUserPostsQueryVariables>(GetUserPostsDocument, options);\r\n        }\r\nexport type GetUserPostsQueryHookResult = ReturnType<typeof useGetUserPostsQuery>;\r\nexport type GetUserPostsLazyQueryHookResult = ReturnType<typeof useGetUserPostsLazyQuery>;\r\nexport type GetUserPostsQueryResult = Apollo.QueryResult<GetUserPostsQuery, GetUserPostsQueryVariables>;\r\nexport const HomePageDocument = gql`\r\n    query HomePage {\r\n  homePage {\r\n    id\r\n    firstName\r\n    lastName\r\n    email\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useHomePageQuery__\r\n *\r\n * To run a query within a React component, call `useHomePageQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useHomePageQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useHomePageQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useHomePageQuery(baseOptions?: Apollo.QueryHookOptions<HomePageQuery, HomePageQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<HomePageQuery, HomePageQueryVariables>(HomePageDocument, options);\r\n      }\r\nexport function useHomePageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomePageQuery, HomePageQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<HomePageQuery, HomePageQueryVariables>(HomePageDocument, options);\r\n        }\r\nexport type HomePageQueryHookResult = ReturnType<typeof useHomePageQuery>;\r\nexport type HomePageLazyQueryHookResult = ReturnType<typeof useHomePageLazyQuery>;\r\nexport type HomePageQueryResult = Apollo.QueryResult<HomePageQuery, HomePageQueryVariables>;\r\nexport const LikeCommentDocument = gql`\r\n    mutation LikeComment($userId: Float!, $commentId: Float!, $isAlreadyLiked: Boolean!) {\r\n  likeComment(\r\n    userId: $userId\r\n    commentId: $commentId\r\n    isAlreadyLiked: $isAlreadyLiked\r\n  ) {\r\n    id\r\n    comment\r\n    createdAt\r\n    likes {\r\n      id\r\n      user {\r\n        id\r\n      }\r\n    }\r\n    user {\r\n      id\r\n      firstName\r\n      lastName\r\n      email\r\n    }\r\n    post {\r\n      id\r\n    }\r\n  }\r\n}\r\n    `;\r\nexport type LikeCommentMutationFn = Apollo.MutationFunction<LikeCommentMutation, LikeCommentMutationVariables>;\r\n\r\n/**\r\n * __useLikeCommentMutation__\r\n *\r\n * To run a mutation, you first call `useLikeCommentMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useLikeCommentMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [likeCommentMutation, { data, loading, error }] = useLikeCommentMutation({\r\n *   variables: {\r\n *      userId: // value for 'userId'\r\n *      commentId: // value for 'commentId'\r\n *      isAlreadyLiked: // value for 'isAlreadyLiked'\r\n *   },\r\n * });\r\n */\r\nexport function useLikeCommentMutation(baseOptions?: Apollo.MutationHookOptions<LikeCommentMutation, LikeCommentMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<LikeCommentMutation, LikeCommentMutationVariables>(LikeCommentDocument, options);\r\n      }\r\nexport type LikeCommentMutationHookResult = ReturnType<typeof useLikeCommentMutation>;\r\nexport type LikeCommentMutationResult = Apollo.MutationResult<LikeCommentMutation>;\r\nexport type LikeCommentMutationOptions = Apollo.BaseMutationOptions<LikeCommentMutation, LikeCommentMutationVariables>;\r\nexport const LikePostDocument = gql`\r\n    mutation LikePost($userId: Float!, $postId: Float!, $isAlreadyLiked: Boolean!) {\r\n  likePost(userId: $userId, postId: $postId, isAlreadyLiked: $isAlreadyLiked) {\r\n    id\r\n    content\r\n    createdAt\r\n    user {\r\n      id\r\n      firstName\r\n      lastName\r\n      email\r\n    }\r\n    likes {\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n    `;\r\nexport type LikePostMutationFn = Apollo.MutationFunction<LikePostMutation, LikePostMutationVariables>;\r\n\r\n/**\r\n * __useLikePostMutation__\r\n *\r\n * To run a mutation, you first call `useLikePostMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useLikePostMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [likePostMutation, { data, loading, error }] = useLikePostMutation({\r\n *   variables: {\r\n *      userId: // value for 'userId'\r\n *      postId: // value for 'postId'\r\n *      isAlreadyLiked: // value for 'isAlreadyLiked'\r\n *   },\r\n * });\r\n */\r\nexport function useLikePostMutation(baseOptions?: Apollo.MutationHookOptions<LikePostMutation, LikePostMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<LikePostMutation, LikePostMutationVariables>(LikePostDocument, options);\r\n      }\r\nexport type LikePostMutationHookResult = ReturnType<typeof useLikePostMutation>;\r\nexport type LikePostMutationResult = Apollo.MutationResult<LikePostMutation>;\r\nexport type LikePostMutationOptions = Apollo.BaseMutationOptions<LikePostMutation, LikePostMutationVariables>;\r\nexport const LoginDocument = gql`\r\n    mutation Login($email: String!, $password: String!) {\r\n  login(email: $email, password: $password) {\r\n    user {\r\n      id\r\n      email\r\n      firstName\r\n      lastName\r\n    }\r\n    errors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}\r\n    `;\r\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\r\n\r\n/**\r\n * __useLoginMutation__\r\n *\r\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useLoginMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\r\n *   variables: {\r\n *      email: // value for 'email'\r\n *      password: // value for 'password'\r\n *   },\r\n * });\r\n */\r\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\r\n      }\r\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\r\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\r\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\r\nexport const LogoutDocument = gql`\r\n    mutation Logout {\r\n  logout\r\n}\r\n    `;\r\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\r\n\r\n/**\r\n * __useLogoutMutation__\r\n *\r\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options);\r\n      }\r\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\r\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\r\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\r\nexport const RegisterDocument = gql`\r\n    mutation Register($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\r\n  register(\r\n    firstName: $firstName\r\n    lastName: $lastName\r\n    email: $email\r\n    password: $password\r\n  ) {\r\n    user {\r\n      id\r\n      email\r\n    }\r\n    errors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}\r\n    `;\r\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\r\n\r\n/**\r\n * __useRegisterMutation__\r\n *\r\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\r\n *   variables: {\r\n *      firstName: // value for 'firstName'\r\n *      lastName: // value for 'lastName'\r\n *      email: // value for 'email'\r\n *      password: // value for 'password'\r\n *   },\r\n * });\r\n */\r\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);\r\n      }\r\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\r\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\r\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\r\nexport const SearchUsersDocument = gql`\r\n    query searchUsers($name: String!) {\r\n  searchUsers(name: $name) {\r\n    id\r\n    firstName\r\n    lastName\r\n    email\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSearchUsersQuery__\r\n *\r\n * To run a query within a React component, call `useSearchUsersQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSearchUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSearchUsersQuery({\r\n *   variables: {\r\n *      name: // value for 'name'\r\n *   },\r\n * });\r\n */\r\nexport function useSearchUsersQuery(baseOptions: Apollo.QueryHookOptions<SearchUsersQuery, SearchUsersQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SearchUsersQuery, SearchUsersQueryVariables>(SearchUsersDocument, options);\r\n      }\r\nexport function useSearchUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchUsersQuery, SearchUsersQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SearchUsersQuery, SearchUsersQueryVariables>(SearchUsersDocument, options);\r\n        }\r\nexport type SearchUsersQueryHookResult = ReturnType<typeof useSearchUsersQuery>;\r\nexport type SearchUsersLazyQueryHookResult = ReturnType<typeof useSearchUsersLazyQuery>;\r\nexport type SearchUsersQueryResult = Apollo.QueryResult<SearchUsersQuery, SearchUsersQueryVariables>;","import React from 'react';\r\nimport { Container, makeStyles, Paper, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  homePaper: {\r\n    margin: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n    paddingTop: theme.spacing(4)\r\n  },\r\n  homePageText: {\r\n    marginTop: theme.spacing(4)\r\n  }\r\n}));\r\n\r\nconst SplashPage = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Paper elevation={3} className={classes.homePaper}>\r\n        <Container maxWidth=\"md\">\r\n          <Typography className={classes.homePageText} variant=\"h3\">Welcome to Bloglet</Typography>\r\n          <Typography className={classes.homePageText} variant=\"h5\">Share your musings with the world through blog posts</Typography>\r\n          <Typography className={classes.homePageText} variant=\"h5\">To get started, register yourself as a user or login with an existing account</Typography>\r\n        </Container>\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SplashPage;","class User {\r\n  constructor(\r\n    id: number,\r\n    email: string,\r\n    firstName: string,\r\n    lastName: string\r\n  ) {\r\n    this.id = id;\r\n    this.email = email;\r\n    this.firstName = firstName;\r\n    this.lastName = lastName;\r\n  }\r\n\r\n  public id: number;\r\n  public email: string;\r\n  public firstName: string;\r\n  public lastName: string;\r\n}\r\n\r\nexport default User;","import { Post, Comment, GetUserPostsDocument } from '../generated/graphql';\r\n\r\nexport const updateComments = (post: Post, data: any) => {\r\n  const updatedComments = post && post.comments ? [...post.comments] : [];\r\n  const likedCommentIndex = updatedComments.findIndex((comment: Comment) => comment.id === data.id);\r\n  updatedComments.splice(likedCommentIndex, 1, data);\r\n  return updatedComments;\r\n}\r\n\r\nexport const updatePosts = (\r\n  posts: Array<Post>,\r\n  propertyToBeUpdated: string,\r\n  data: any,\r\n  isUpdatingCommentLikes: boolean,\r\n) => {\r\n  const updatedPosts = [...posts];\r\n  let updatedPostIndex = 0;\r\n  let updatedPost: any = {};\r\n  updatedPosts.forEach((post, index) => {\r\n    if (\r\n      (propertyToBeUpdated === 'likes' && post.id === data.id) ||\r\n      (propertyToBeUpdated === 'comments' && isUpdatingCommentLikes && post.id === data.post.id) ||\r\n      (propertyToBeUpdated === 'comments' && !isUpdatingCommentLikes && post.id === data.id)\r\n    ) {\r\n      updatedPostIndex = index;\r\n      updatedPost = {...post};\r\n      if (propertyToBeUpdated === 'likes') {\r\n        updatedPost[propertyToBeUpdated] = data.likes;\r\n      } else if (propertyToBeUpdated === 'comments' && isUpdatingCommentLikes) {\r\n        updatedPost[propertyToBeUpdated] = updateComments(post, data);\r\n      } else if (propertyToBeUpdated === 'comments' && !isUpdatingCommentLikes) {\r\n        updatedPost[propertyToBeUpdated] = data.comments;\r\n      }\r\n    }\r\n  });\r\n  updatedPosts.splice(updatedPostIndex, 1, updatedPost);\r\n  return updatedPosts;\r\n}\r\n\r\nexport const readGetUserPostsQuery = (cache: any, userId: number) => {\r\n  return cache.readQuery({\r\n    query: GetUserPostsDocument,\r\n    variables: { userId }\r\n  });\r\n}\r\n\r\nexport const checkForDuplicateItems = (existing: Array<any>, incoming: Array<any>): boolean => {\r\n  const existingIdMap: any = {};\r\n  let hasDuplicates: boolean = false;\r\n  if (existing) {\r\n    existing.forEach((existingItem: any) => {\r\n      const id = getItemIdentifier(existingItem);\r\n      existingIdMap[id] = id;\r\n    });\r\n  }\r\n  if (incoming) {\r\n    incoming.forEach((incomingItem: any) => {\r\n      const id = getItemIdentifier(incomingItem);\r\n      if (existingIdMap[id] === id) {\r\n        hasDuplicates = true;\r\n      }\r\n    });\r\n  }\r\n  return hasDuplicates;\r\n}\r\n\r\nexport const getItemIdentifier = (item: any) => {\r\n  if (item.id) return item.id;\r\n  if (item.__ref) {\r\n    let refNumber = item.__ref.replace(/[^0-9]/g,'');\r\n    refNumber = parseInt(refNumber);\r\n    return refNumber;\r\n  }\r\n}","import User from './types/user.interface';\r\nimport { InMemoryCache, makeVar, ReactiveVar } from '@apollo/client';\r\nimport { checkForDuplicateItems } from './utils/cache-modification.util';\r\n\r\nexport const currentUserProfileVar: ReactiveVar<User> = makeVar(new User(0, '', '', ''));\r\nexport const currentGetUserPostsCursorVar: ReactiveVar<number> = makeVar(0);\r\nexport const loggedInUserProfileVar: ReactiveVar<User> = makeVar(new User(0, '', '', ''));\r\n\r\nconst cache = new InMemoryCache({\r\n  typePolicies: {\r\n    Query: {\r\n      fields: {\r\n        currentUserProfile: {\r\n          read() {\r\n            return currentUserProfileVar();\r\n          }\r\n        },\r\n        currentGetUserPostsCursor: {\r\n          read() {\r\n            return currentGetUserPostsCursorVar();\r\n          }\r\n        },\r\n        loggedInUserProfileVar: {\r\n          read() {\r\n            return loggedInUserProfileVar();\r\n          }\r\n        },\r\n        getUserPosts: {\r\n          keyArgs: ['type', 'id'],\r\n          merge(existing = [], incoming = [], { args }) {\r\n            if (\r\n              existing &&\r\n              existing.length &&\r\n              (\r\n                (args && args.userId !== currentUserProfileVar().id)\r\n                || checkForDuplicateItems(existing, incoming)\r\n              )\r\n            ) {\r\n              /* If the args.userId don't match the current user that's being viewed, return existing (instead of merging the incoming).\r\n              This is so that you don't see posts from another user on a different user's profile page.\r\n              If there are duplicate posts then default to returning the existing posts. */\r\n              return [...existing];\r\n            }\r\n            return existing && existing.length ? [...existing, ...incoming] : incoming;\r\n          }\r\n        },\r\n        getFollowers: {\r\n          merge(existing = [], incoming) {\r\n            return incoming;\r\n          }\r\n        },\r\n        getFollowing: {\r\n          merge(existing = [], incoming) {\r\n            return incoming;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    Post: {\r\n      fields: {\r\n        likes: {\r\n          merge(existing, incoming) {\r\n            return incoming;\r\n          }\r\n        },\r\n        comments: {\r\n          merge(existing, incoming) {\r\n            let newIncoming: any = incoming ? [...incoming] : [];\r\n            return newIncoming.sort((a: any, b: any) => {\r\n              if (a.__ref > b.__ref) {\r\n                return 1;\r\n              }\r\n              if (a.__ref < b.__ref) {\r\n                return -1;\r\n              }\r\n              return 0;\r\n            });\r\n          }\r\n        }\r\n      }\r\n    },\r\n    Comment: {\r\n      fields: {\r\n        likes: {\r\n          merge(existing, incoming) {\r\n            return incoming;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport default cache;","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\n\r\ninterface Props {\r\n  loading: boolean,\r\n  loggedInUser: number,\r\n  followers: any,\r\n  handleFollowUser: (isAlreadyFollowing: boolean) => void,\r\n}\r\n\r\nconst FollowButton = ({\r\n  followers,\r\n  loggedInUser,\r\n  loading,\r\n  handleFollowUser\r\n}: Props) => {\r\n  const isLoggedInUserFollowing: boolean = !!followers &&\r\n    !!followers.getFollowers &&\r\n    followers.getFollowers.some((follower: any) => {\r\n      return follower && follower.follower ? follower.follower.id === loggedInUser : false;\r\n    });\r\n\r\n  return (\r\n    <Button\r\n      variant={isLoggedInUserFollowing ? \"contained\" : \"outlined\"}\r\n      color=\"primary\"\r\n      onClick={() => handleFollowUser(isLoggedInUserFollowing)}\r\n      disabled={loading}\r\n    >\r\n      {isLoggedInUserFollowing ? 'Following' : 'Follow'}\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default FollowButton;\r\n","import React from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\n\r\ninterface Props {\r\n  followers: any;\r\n  following: any;\r\n  followerLoading: boolean;\r\n  followingLoading: boolean;\r\n}\r\n\r\nconst UserFollows = ({\r\n  followers,\r\n  following,\r\n  followerLoading,\r\n  followingLoading\r\n}: Props) => {\r\n  \r\n  if (followingLoading || followerLoading) {\r\n    return (<>Loading</>);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={3}>\r\n          <Typography variant=\"subtitle1\">Following: {following ? following?.getFollowing?.length : 0}</Typography>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Typography variant=\"subtitle1\">Followers: {followers ? followers?.getFollowers?.length : 0}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserFollows;","import React from 'react';\r\nimport FollowButton from '../../components/follow-button';\r\nimport UserFollows from '../../components/user-follows';\r\nimport { useMutation, useReactiveVar } from '@apollo/client';\r\nimport { currentUserProfileVar } from '../../cache';\r\nimport { Follows, FollowUserDocument, useGetFollowersQuery, useGetFollowingQuery, User } from '../../generated/graphql';\r\n\r\ninterface Props {\r\n  loggedInUser: number;\r\n  userToBeFollowed: number;\r\n}\r\n\r\nconst UserFollowsContainer = ({ loggedInUser, userToBeFollowed }: Props) => {\r\n  const currentUserProfile: User = useReactiveVar(currentUserProfileVar);\r\n\r\n  const { data: followingData, loading: followingLoading } = useGetFollowingQuery({\r\n    variables: { userId: currentUserProfile.id },\r\n    fetchPolicy: 'network-only'\r\n  });\r\n\r\n  const { data: followerData, loading: followerLoading } = useGetFollowersQuery({\r\n    variables: { userId: currentUserProfile.id },\r\n    fetchPolicy: 'network-only'\r\n  });\r\n\r\n  const [followUser, { loading }] = useMutation(FollowUserDocument, {\r\n    update(cache, data) {\r\n      cache.modify({\r\n        fields: {\r\n          getFollowers(existingFollowers: any) {\r\n            const oldFollowers: Array<any> = existingFollowers ? [...existingFollowers] : [];\r\n            if (!data.data.followUser) {\r\n              const unfollowedIndex = oldFollowers.findIndex((follow) => {\r\n                return follow && follow.follower ? follow.follower.id === loggedInUser : false;\r\n              });\r\n              oldFollowers.splice(unfollowedIndex, 1);\r\n            }\r\n            return data.data.followUser ? [...oldFollowers, data.data.followUser] : oldFollowers;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  const handleFollowUser = (isAlreadyFollowing: boolean) => {\r\n    followUser({\r\n      variables: {\r\n        loggedInUser,\r\n        userToBeFollowed,\r\n        isAlreadyFollowing\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <UserFollows\r\n        followers={followerData}\r\n        following={followingData}\r\n        followerLoading={followerLoading}\r\n        followingLoading={followingLoading}\r\n      />\r\n      <FollowButton\r\n        followers={followerData}\r\n        loggedInUser={loggedInUser}\r\n        loading={loading}\r\n        handleFollowUser={handleFollowUser}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserFollowsContainer;","import React, { ChangeEvent, useState } from 'react';\r\nimport { Button, Container, makeStyles, Paper, TextField, Typography } from '@material-ui/core';\r\n\r\ninterface Props {\r\n  handleCreatePost: (e: React.FormEvent, callback: () => void) => Promise<void>\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  newPostPaper: {\r\n    paddingBottom: theme.spacing(4),\r\n    paddingTop: theme.spacing(4)\r\n  },\r\n  newPostTextField: {\r\n    width: '100%'\r\n  },\r\n  submitBtn: {\r\n    marginTop: theme.spacing(4)\r\n  }\r\n}));\r\n\r\nconst PostInput: React.FC<Props> = (props: Props) => {\r\n  const classes = useStyles();\r\n  const [postContent, setPostContent] = useState('');\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setPostContent(e.target.value);\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setPostContent('');\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} className={classes.newPostPaper}>\r\n      <Container maxWidth=\"md\">\r\n        <Typography variant=\"h5\" noWrap>Create Post</Typography>\r\n        <form noValidate autoComplete=\"off\" onSubmit={(e: React.FormEvent) => props.handleCreatePost(e, clearForm)}>\r\n          <div>\r\n            <TextField\r\n              id=\"input-content\"\r\n              label=\"What's on your mind?\"\r\n              name=\"content\"\r\n              multiline\r\n              className={classes.newPostTextField}\r\n              value={postContent}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            className={classes.submitBtn}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </form>\r\n      </Container>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default PostInput;","import React from 'react';\r\nimport PostInput from '../../components/post-input';\r\nimport { useMutation, useReactiveVar } from '@apollo/client';\r\nimport { CreatePostDocument, Post, User } from '../../generated/graphql';\r\nimport { readGetUserPostsQuery } from '../../utils/cache-modification.util';\r\nimport { currentGetUserPostsCursorVar, currentUserProfileVar, loggedInUserProfileVar } from '../../cache';\r\n\r\nconst PostInputContainer = () => {\r\n  const loggedInUser: User = useReactiveVar(loggedInUserProfileVar);\r\n  const currentUserProfile: User = useReactiveVar(currentUserProfileVar);\r\n  const currentGetUserPostsCursor: number = useReactiveVar(currentGetUserPostsCursorVar);\r\n\r\n  const [createPost] = useMutation(CreatePostDocument, {\r\n    update(cache, data) {\r\n      const posts: any = readGetUserPostsQuery(cache, currentUserProfile.id);\r\n      cache.modify({\r\n        fields: {\r\n          getUserPosts() {\r\n            return [data.data.createPost, ...posts.getUserPosts as Array<Post>];\r\n          }\r\n        }\r\n      });\r\n    } /* To avoid refetching, I can use the cache update function to add the Post instance\r\n    that was returned by the mutation to the existing array of posts. While this takes more\r\n    code, it's ultimately faster than refetching because there's not a network call. */\r\n  });\r\n\r\n  const handleCreatePost = async (e: React.FormEvent, callback: ()=> void): Promise<void> => {\r\n    e.preventDefault();\r\n    const formData = new FormData(e.target as HTMLFormElement);\r\n    currentGetUserPostsCursorVar(currentGetUserPostsCursor + 1);\r\n    await createPost({\r\n      variables: {\r\n        creatorId: loggedInUser.id,\r\n        content: formData.get('content') as string,\r\n      }\r\n    });\r\n    callback(); // Used to clear the post form after saving a post\r\n  }\r\n\r\n  return (\r\n    <PostInput handleCreatePost={handleCreatePost} />\r\n  );\r\n}\r\n\r\nexport default PostInputContainer;","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ThumbUp, ThumbUpOutlined } from '@material-ui/icons';\r\n\r\ninterface Props {\r\n  isAlreadyLiked: boolean\r\n  handleLikeButtonClick: () => void\r\n}\r\n\r\nconst LikeButton = ({ isAlreadyLiked, handleLikeButtonClick}: Props) => {\r\n  return (\r\n    <IconButton\r\n      color=\"primary\"\r\n      size=\"small\"\r\n      onClick={handleLikeButtonClick}\r\n    >\r\n      {isAlreadyLiked ? <ThumbUp /> : <ThumbUpOutlined />}\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport default LikeButton;","import React from 'react';\r\nimport { useReactiveVar } from '@apollo/client';\r\nimport { CommentLike, PostLike, User } from '../../generated/graphql';\r\nimport { loggedInUserProfileVar } from '../../cache';\r\nimport LikeButton from '../../components/like-button';\r\n\r\ninterface Props {\r\n  item: any;\r\n  likeMutation: any\r\n}\r\n\r\nconst LikeButtonContainer = ({ item, likeMutation}: Props) => {\r\n  const loggedInUser: User = useReactiveVar(loggedInUserProfileVar);\r\n\r\n  const isAlreadyLiked: boolean = item && item.likes ?\r\n    item.likes.some((like: PostLike | CommentLike) => like.user && like.user.id === loggedInUser.id) : false;\r\n\r\n  const handleLikeButtonClick = (): void => {\r\n    likeMutation(loggedInUser.id, item.id, isAlreadyLiked);\r\n  }\r\n\r\n  return (\r\n    <LikeButton\r\n      isAlreadyLiked={isAlreadyLiked}\r\n      handleLikeButtonClick={handleLikeButtonClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LikeButtonContainer;","import React from 'react';\r\nimport { Grid, List, ListItem, ListItemText, makeStyles, Typography } from '@material-ui/core';\r\nimport LikeButtonContainer from '../../containers/like-button-container';\r\nimport { User } from '../../generated/graphql';\r\n\r\ninterface Props {\r\n  comments: Array<any>;\r\n  likeComment: any;\r\n  handleItemCreatorClick: (user: User) => void\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 400\r\n  },\r\n  commentCreator: {\r\n    cursor: 'pointer'\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n  likes: {\r\n    marginBottom: 4\r\n  },\r\n  commentCreatedAt: {\r\n    display: 'block'\r\n  }\r\n});\r\n\r\nconst CommentList: React.FC<Props> = ({ comments, likeComment, handleItemCreatorClick }: Props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      {comments.map((comment, index: number) => {\r\n        return (\r\n          <ListItem alignItems=\"flex-start\" key={`comment-${index}`} id={`comment-${index}`}>\r\n            <Grid container spacing={2} className={classes.likes}>\r\n              <Grid item xs={10}> \r\n                <ListItemText\r\n                  secondary={\r\n                    <React.Fragment>\r\n                      <span onClick={() => handleItemCreatorClick(comment.user)} className={classes.commentCreator}>\r\n                        <Typography\r\n                          component=\"span\"\r\n                          variant=\"subtitle2\"\r\n                          className={classes.inline}\r\n                          color=\"textPrimary\"\r\n                        >\r\n                          {comment && comment.user ? `${comment.user.firstName} ${comment.user.lastName} ` : ''}\r\n                        </Typography>\r\n                      </span>\r\n                      <Typography\r\n                        component=\"span\"\r\n                        variant=\"body2\"\r\n                        className={classes.inline}\r\n                      >\r\n                        {comment && comment.comment ? comment.comment : ''}\r\n                      </Typography>\r\n                      <span className={classes.commentCreatedAt}>\r\n                        <Typography variant=\"caption\">\r\n                          {comment ? comment.createdAt : ''}\r\n                        </Typography>\r\n                      </span>\r\n                    </React.Fragment>\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                <LikeButtonContainer item={comment} likeMutation={likeComment} />\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">{comment && comment.likes ? comment.likes.length : 0}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default CommentList;\r\n","import React from 'react';\r\nimport CommentList from '../../components/comment-list';\r\nimport { useMutation, useReactiveVar } from '@apollo/client';\r\nimport { currentUserProfileVar } from '../../cache';\r\nimport { LikeCommentDocument, User } from '../../generated/graphql';\r\nimport { readGetUserPostsQuery, updatePosts } from '../../utils/cache-modification.util';\r\n\r\ninterface Props {\r\n  comments: Array<any>;\r\n  handleItemCreatorClick: (user: User) => void\r\n}\r\n\r\nconst CommentListContainer = ({ comments, handleItemCreatorClick }: Props) => {\r\n  const currentUserProfile: User = useReactiveVar(currentUserProfileVar);\r\n\r\n  const [likeComment] = useMutation(LikeCommentDocument, {\r\n    update(cache, { data }) {\r\n      const posts: any = readGetUserPostsQuery(cache, currentUserProfile.id);\r\n      cache.modify({\r\n        fields: {\r\n          getUserPosts() {\r\n            return updatePosts(posts.getUserPosts, 'comments', data.likeComment, true);\r\n          }\r\n        }\r\n      })\r\n    }\r\n  });\r\n\r\n  const handleLikeComment = (userId: number, commentId: number, isAlreadyLiked: boolean) => {\r\n    likeComment({\r\n      variables: {\r\n        userId,\r\n        commentId,\r\n        isAlreadyLiked\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <CommentList\r\n      comments={comments}\r\n      likeComment={handleLikeComment}\r\n      handleItemCreatorClick={handleItemCreatorClick}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CommentListContainer;","import React, { ChangeEvent, useState } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\ninterface Props {\r\n  loading: boolean,\r\n  handleCreateComment: (e: React.FormEvent, comment: string, callback: () => void) => Promise<void>\r\n}\r\n\r\nconst CommentInput = ({ loading, handleCreateComment }: Props) => {\r\n  const [comment, setComment] = useState('');\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setComment(e.target.value);\r\n  }\r\n\r\n  const clearForm = () => {\r\n    setComment('');\r\n  };\r\n\r\n  return (\r\n    <form noValidate autoComplete=\"off\" onSubmit={(e: React.FormEvent) => handleCreateComment(e, comment, clearForm)}>\r\n      <div>\r\n        <TextField\r\n          label=\"Comment\"\r\n          name=\"comment\"\r\n          fullWidth\r\n          disabled={loading}\r\n          value={comment}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CommentInput;","import React from 'react';\r\nimport { useMutation, useReactiveVar } from '@apollo/client';\r\nimport { currentUserProfileVar, loggedInUserProfileVar } from '../../cache';\r\nimport { readGetUserPostsQuery, updatePosts } from '../../utils/cache-modification.util';\r\nimport { CreateCommentDocument, User } from '../../generated/graphql';\r\nimport CommentInput from '../../components/comment-input';\r\n\r\ninterface Props {\r\n  postId: number\r\n}\r\n\r\nconst CommentInputContainer = ({ postId }: Props) => {\r\n  const loggedInUser: User = useReactiveVar(loggedInUserProfileVar);\r\n  const currentUserProfile: User = useReactiveVar(currentUserProfileVar);\r\n\r\n  const [createComment, { loading }] = useMutation(CreateCommentDocument, {\r\n    update(cache, { data }) {\r\n      const posts: any = readGetUserPostsQuery(cache, currentUserProfile.id);\r\n      cache.modify({\r\n        fields: {\r\n          getUserPosts() {\r\n            return updatePosts(posts.getUserPosts, 'comments', data.createComment, false);\r\n          }\r\n        }\r\n      })\r\n    }\r\n  });\r\n\r\n  const handleCreateComment = async (e: React.FormEvent, comment: string, callback: ()=> void): Promise<void> => {\r\n    e.preventDefault();\r\n    await createComment({\r\n      variables: {\r\n        comment,\r\n        userId: loggedInUser.id,\r\n        postId,\r\n        createdAt: new Date().toLocaleString()\r\n      },\r\n    });\r\n    callback();\r\n  }\r\n\r\n  return (\r\n    <CommentInput\r\n      loading={loading}\r\n      handleCreateComment={handleCreateComment}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CommentInputContainer;","import React from 'react';\r\nimport {\r\n  Menu,\r\n  MenuItem,\r\n  MenuProps,\r\n  IconButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  withStyles\r\n} from '@material-ui/core';\r\nimport { MoreHoriz, Delete } from '@material-ui/icons';\r\n\r\n\r\ninterface Props {\r\n  postId: number;\r\n  deletePost: () => any;\r\n}\r\n\r\n\r\nconst StyledMenu = withStyles({\r\n  paper: {\r\n    border: '1px solid #d3d4d5',\r\n  },\r\n})((props: MenuProps) => (\r\n  <Menu\r\n    elevation={0}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: 'bottom',\r\n      horizontal: 'center',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    }}\r\n    {...props}\r\n  />\r\n));\r\n\r\n\r\nconst PostMenu = ({ postId, deletePost }: Props) => {\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n\r\n  const handleDelete = () => {\r\n    handleClose();\r\n    deletePost();\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <IconButton size=\"small\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n        <MoreHoriz />\r\n      </IconButton>\r\n      <StyledMenu\r\n        id=\"customized-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={handleDelete}>\r\n          <ListItemIcon>\r\n            <Delete fontSize=\"small\" />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Delete Post\" />\r\n        </MenuItem>\r\n      </StyledMenu>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default PostMenu;","import { useMutation, useReactiveVar } from '@apollo/client';\r\nimport PostMenu from '../../components/post-menu';\r\nimport { DeletePostDocument, User, Post } from '../../generated/graphql';\r\nimport { currentUserProfileVar } from '../../cache';\r\nimport { readGetUserPostsQuery } from '../../utils/cache-modification.util';\r\n\r\ninterface Props {\r\n  postId: number;\r\n}\r\n\r\nconst PostMenuContainer = ({ postId }: Props) => {\r\n  const currentUserProfile: User = useReactiveVar(currentUserProfileVar);\r\n\r\n  const [deletePost] = useMutation(DeletePostDocument, {\r\n    variables: {\r\n      postId\r\n    },\r\n    update(cache) {\r\n      const posts: any = readGetUserPostsQuery(cache, currentUserProfile.id);\r\n      cache.modify({\r\n        fields: {\r\n          getUserPosts() {\r\n            return posts.getUserPosts.filter((post: Post) => post.id !== postId) as Array<Post>\r\n          }\r\n        }\r\n      })\r\n    }\r\n  });\r\n\r\n  return (\r\n    <PostMenu deletePost={deletePost} postId={postId} />\r\n  );\r\n}\r\n\r\nexport default PostMenuContainer;","import React, { useState } from 'react';\r\nimport { Card, CardContent, Grid, IconButton, makeStyles, Typography } from '@material-ui/core';\r\nimport { CommentOutlined } from '@material-ui/icons';\r\nimport CommentListContainer from '../../containers/comment-list-container';\r\nimport CommentInputContainer from '../../containers/comment-input-container';\r\nimport PostMenuContainer from '../../containers/post-menu-container';\r\nimport { User } from '../../generated/graphql';\r\nimport LikeButtonContainer from '../../containers/like-button-container';\r\n\r\ninterface Props {\r\n  post: any;\r\n  likePost: any;\r\n  handleItemCreatorClick: (user: User) => void;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 400,\r\n    marginTop: 30\r\n  },\r\n  postCreator: {\r\n    cursor: 'pointer'\r\n  },\r\n  post: {\r\n    marginBottom: 12,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n  likes: {\r\n    marginBottom: 4\r\n  }\r\n});\r\n\r\nconst Post: React.FC<Props> = ({\r\n  post,\r\n  likePost,\r\n  handleItemCreatorClick\r\n}: Props) => {\r\n  const classes = useStyles();\r\n\r\n  const [showCommentInput, setShowCommentInput] = useState(false);\r\n\r\n  const handleShowCommentInput = (): void => {\r\n    if (!showCommentInput) {\r\n      setShowCommentInput(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\" key={post.id}>\r\n      <CardContent>\r\n        <div className={classes.post}>\r\n          <span onClick={() => handleItemCreatorClick(post.user)} className={classes.postCreator}>\r\n            <Typography\r\n              component=\"span\"\r\n              variant=\"subtitle2\"\r\n              className={classes.inline}\r\n              color=\"textPrimary\"\r\n            >\r\n              {post && post.user ? `${post.user.firstName} ${post.user.lastName} ` : ''}\r\n            </Typography>\r\n          </span>\r\n          <Typography variant=\"caption\" className={classes.inline}>\r\n            {new Date(post.createdAt).toLocaleString()}\r\n          </Typography>\r\n        </div>\r\n        <div className={classes.post}>\r\n          <Typography variant=\"subtitle1\">\r\n            {post.content}\r\n          </Typography>\r\n        </div>\r\n        <Grid container spacing={3} className={classes.likes}>\r\n          <Grid item xs={1}>\r\n            <LikeButtonContainer item={post} likeMutation={likePost} />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">{post.likes.length}</Typography>\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <IconButton size=\"small\" onClick={handleShowCommentInput}>\r\n              <CommentOutlined />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">{post.comments.length}</Typography>\r\n          </Grid>\r\n          <Grid item xs={4}></Grid>\r\n          <Grid item xs={2}>\r\n            <PostMenuContainer postId={post.id} />\r\n          </Grid>\r\n        </Grid>\r\n        {showCommentInput && <CommentInputContainer postId={post.id} />}\r\n        <CommentListContainer comments={post.comments} handleItemCreatorClick={handleItemCreatorClick} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport { GetUserPostsQuery, User } from '../../generated/graphql';\r\nimport Post from '../post';\r\n\r\ninterface Props {\r\n  posts: GetUserPostsQuery['getUserPosts'],\r\n  likePost: any,\r\n  handleItemCreatorClick: (user: User) => void\r\n}\r\n\r\nconst PostList: React.FC<Props> = ({\r\n  posts,\r\n  likePost,\r\n  handleItemCreatorClick\r\n}: Props) => {\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      {!!posts ? posts.map((post: any) => (\r\n        <Post\r\n          key={`post-${post.id}`}\r\n          post={post}\r\n          likePost={likePost}\r\n          handleItemCreatorClick={handleItemCreatorClick}\r\n        />\r\n      )) : []}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PostList;","import { useState, useEffect } from 'react';\r\n\r\nexport const SCROLL_DIRECTION_DOWN = 'SCROLL_DIRECTION_DOWN';\r\nexport const SCROLL_DIRECTION_UP = 'SCROLL_DIRECTION_UP';\r\nexport const SCROLL_DIRECTION_NONE = 'SCROLL_DIRECTION_NONE';\r\nexport const OFFSET_LIMIT = 5;\r\n\r\nexport const useScrollDirection = (callback: any) => {\r\n  const [lastYPosition, setLastYPosition] = useState(window.pageYOffset);\r\n\r\n  const handleScroll = () => {\r\n    if (window.pageYOffset === lastYPosition) return SCROLL_DIRECTION_NONE\r\n\r\n    const direction = (() => {\r\n      return lastYPosition < window.pageYOffset\r\n        ? SCROLL_DIRECTION_DOWN\r\n        : SCROLL_DIRECTION_UP;\r\n    })()\r\n\r\n    callback(direction)\r\n    setLastYPosition(window.pageYOffset)\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll)\r\n  })\r\n};\r\n","import { gql } from '@apollo/client';\r\n\r\nconst clearUserPosts = gql`\r\n  mutation clearPosts {\r\n    getUserPosts @client\r\n  }\r\n`;\r\n\r\nexport default clearUserPosts;","import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useMutation, useQuery, useReactiveVar } from '@apollo/client';\r\nimport PostList from '../../components/post-list';\r\nimport { currentGetUserPostsCursorVar, currentUserProfileVar } from '../../cache';\r\nimport { GetUserPostsDocument, LikePostDocument, User } from '../../generated/graphql';\r\nimport { OFFSET_LIMIT, SCROLL_DIRECTION_DOWN, useScrollDirection } from '../../hooks/use-scroll.hook';\r\nimport { readGetUserPostsQuery, updatePosts } from '../../utils/cache-modification.util';\r\nimport clearUserPosts from '../../cache-queries/clear-user-posts';\r\n\r\ninterface Props {\r\n  isGettingNewsfeed: boolean;\r\n}\r\n\r\nconst PostListContainer = ({ isGettingNewsfeed }: Props) => {\r\n  const currentUserProfile: User = useReactiveVar(currentUserProfileVar);\r\n  const currentGetUserPostsCursor: number = useReactiveVar(currentGetUserPostsCursorVar);\r\n\r\n  const history = useHistory();\r\n\r\n  const { data: postsData, loading: postsLoading, fetchMore } = useQuery(GetUserPostsDocument, {\r\n    variables: {\r\n      userId: currentUserProfile.id,\r\n      cursor: currentGetUserPostsCursor,\r\n      offsetLimit: OFFSET_LIMIT,\r\n      isGettingNewsfeed\r\n    },\r\n    skip: !currentUserProfile.id,\r\n    onError: (err: any) => console.log('getting user posts error:', err),\r\n  });\r\n\r\n  const [likePost] = useMutation(LikePostDocument, {\r\n    update(cache, { data }) {\r\n      const posts: any = readGetUserPostsQuery(cache, currentUserProfile.id);\r\n      cache.modify({\r\n        fields: {\r\n          getUserPosts() {\r\n            return updatePosts(posts.getUserPosts, 'likes', data.likePost, false);\r\n          }\r\n        }\r\n      })\r\n    }\r\n  });\r\n\r\n  const handleLikePost = (userId: number, postId: number, isAlreadyLiked: boolean) => {\r\n    likePost({\r\n      variables: {\r\n        userId,\r\n        postId,\r\n        isAlreadyLiked\r\n      }\r\n    });\r\n  }\r\n\r\n  useScrollDirection(async (scrollDirection: string) => {\r\n    if (\r\n      scrollDirection === SCROLL_DIRECTION_DOWN &&\r\n      window.scrollY + window.innerHeight > document.documentElement.scrollHeight - 2 &&\r\n      !postsLoading &&\r\n      postsData &&\r\n      postsData.getUserPosts &&\r\n      postsData.getUserPosts.length\r\n    ) {\r\n      currentGetUserPostsCursorVar(currentGetUserPostsCursor + OFFSET_LIMIT);\r\n      await fetchMore({\r\n        variables: {\r\n          userId: currentUserProfile.id,\r\n          cursor: currentGetUserPostsCursor,\r\n          offsetLimit: OFFSET_LIMIT,\r\n          isGettingNewsfeed\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  const [clearPosts] = useMutation(clearUserPosts, {\r\n    update(cache) {\r\n      cache.modify({\r\n        fields: {\r\n          getUserPosts() {\r\n            return [];\r\n          }\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  useEffect(\r\n    () => {\r\n      return function cleanupPostsList() {\r\n        clearPosts();\r\n      }\r\n    },\r\n    [clearPosts]\r\n  ); /* This calls the homePageQuery once to get the currently logged in user */\r\n\r\n  const handleItemCreatorClick = (user: User) => {\r\n    clearPosts();\r\n    currentUserProfileVar({...user});\r\n    currentGetUserPostsCursorVar(0);\r\n    history.push('/profile');\r\n  }\r\n\r\n  return (\r\n    <PostList\r\n      posts={postsData?.getUserPosts}\r\n      likePost={handleLikePost}\r\n      handleItemCreatorClick={handleItemCreatorClick}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PostListContainer;","import React, { useEffect } from 'react';\r\nimport { Container, makeStyles, Typography, Backdrop, CircularProgress } from '@material-ui/core';\r\nimport { useLazyQuery, useReactiveVar } from '@apollo/client';\r\nimport {\r\n  GetUserPostsDocument,\r\n  useHomePageLazyQuery,\r\n  User\r\n} from '../../generated/graphql';\r\nimport SplashPage from '../../components/splash-page';\r\nimport { currentUserProfileVar, loggedInUserProfileVar } from '../../cache';\r\nimport UserFollowsContainer from '../../containers/user-follows-container';\r\nimport PostInputContainer from '../../containers/post-input-container';\r\nimport PostListContainer from '../../containers/post-list-container';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { OFFSET_LIMIT } from '../../hooks/use-scroll.hook';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  homePageContainer: {\r\n    minHeight: '100vh'\r\n  },\r\n  currentUserInfoContainer: {\r\n    marginBottom: 30\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst Home: React.FC<RouteComponentProps> = ({ history }) => {\r\n  const classes = useStyles();\r\n\r\n  const currentUserProfile: User = useReactiveVar(currentUserProfileVar);\r\n  const loggedInUser: User = useReactiveVar(loggedInUserProfileVar);\r\n\r\n  const [homePageQueryExecutor, { data: userData, loading }] = useHomePageLazyQuery({\r\n    fetchPolicy: 'network-only',\r\n    onCompleted: (data: any) => {\r\n      if (data && data.homePage) {\r\n        const {__typename, ...newUser} = data.homePage;\r\n        getUserPosts({\r\n          variables: {\r\n            userId: newUser.id,\r\n            cursor: 0,\r\n            offsetLimit: OFFSET_LIMIT,\r\n            isGettingNewsfeed: true\r\n          }\r\n        });\r\n        currentUserProfileVar(newUser); /* this updates the local Apollo state in the cache for the currentUserProfileVar\r\n        reactive variable. Instead of using routing to open a user profile, I'll be using local state to determine\r\n        which user posts to display. In primaryAppBar, when a user is searched for and selected, currentUserProfileVar\r\n        is updated, causing the useGetUserPostsQuery to call with a new userId. */\r\n        loggedInUserProfileVar(newUser);\r\n      }\r\n    }\r\n  });\r\n  /* use the lazy query to prevent the \"Can't perform a React state update on an unmounted component.\" error */\r\n\r\n  const [getUserPosts, { loading: postsLoading }] = useLazyQuery(GetUserPostsDocument, {\r\n    fetchPolicy: 'network-only',\r\n    onError: (err) => console.log('get user posts lazy query error', err)\r\n  });\r\n\r\n  useEffect(\r\n    () => {\r\n      /* Only run the homePageQuery if user has just logged in. We don't want this query running everytime\r\n      the user switches from Profile to Home page. */\r\n      if (!loggedInUser || !loggedInUser.id) {\r\n        homePageQueryExecutor();\r\n      } else {\r\n        getUserPosts({\r\n          variables: {\r\n            userId: loggedInUser.id,\r\n            cursor: 0,\r\n            offsetLimit: OFFSET_LIMIT,\r\n            isGettingNewsfeed: true\r\n          }\r\n        });\r\n      }\r\n\r\n      return () => {}\r\n    },\r\n    [homePageQueryExecutor, getUserPosts, loggedInUser]\r\n  ); /* This calls the homePageQuery once to get the currently logged in user's newsfeed */\r\n\r\n  return (\r\n    <div className={classes.homePageContainer}>\r\n      {(userData && userData.homePage) || (loggedInUser && loggedInUser.id) ?\r\n        <>\r\n          <Container maxWidth=\"sm\">\r\n            <div className={classes.currentUserInfoContainer}>\r\n              <Typography variant=\"h4\">\r\n                {`${currentUserProfile.firstName} ${currentUserProfile.lastName}`}\r\n              </Typography>\r\n              <UserFollowsContainer\r\n                loggedInUser={loggedInUser.id}\r\n                userToBeFollowed={currentUserProfile.id}\r\n              />\r\n            </div>\r\n            {loggedInUser && currentUserProfile.id === loggedInUser.id &&\r\n              <PostInputContainer />\r\n            }\r\n            <PostListContainer isGettingNewsfeed={true} />\r\n          </Container>\r\n        </> :\r\n        <SplashPage />\r\n      }\r\n      <Backdrop className={classes.backdrop} open={loading || postsLoading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","export const validateRequiredTextField = (value: string): boolean => {\r\n  let isValidField: boolean = true;\r\n  if (!value) {\r\n    isValidField = false;\r\n  }\r\n  return isValidField;\r\n}\r\n","import { useState, useCallback, ChangeEvent } from 'react';\r\nimport { validateEmailField } from '../utils/email-field-validation.util';\r\nimport { validateRequiredTextField } from '../utils/text-field-validation.util';\r\n\r\nexport const useFormField = (initialValue: string = '', fieldType: string = 'text') => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const [error, setError] = useState(false);\r\n  const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    if (fieldType === 'text') {\r\n      setError(!validateRequiredTextField(e.target.value));\r\n    } else if (fieldType === 'email') {\r\n      setError(!validateEmailField(e.target.value));\r\n    }\r\n    setValue(e.target.value);\r\n  }, [fieldType]);\r\n  return { value, onChange, error };\r\n};","import { validateRequiredTextField } from './text-field-validation.util';\r\n\r\nexport const validateEmailField = (value: string): boolean => {\r\n  let isEmailValid: boolean = validateRequiredTextField(value);\r\n  const mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n  if (!value.match(mailformat)) {\r\n    isEmailValid = false;\r\n  }\r\n  return isEmailValid;\r\n}","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  Container,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Snackbar\r\n} from '@material-ui/core';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { useRegisterMutation } from '../../generated/graphql';\r\nimport { useFormField } from '../../hooks/use-form-field.hook';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  registerPageContainer: {\r\n    height: '100vh',\r\n  },\r\n  registerPaper: {\r\n    width: '40%',\r\n    margin: '0 auto',\r\n    paddingBottom: theme.spacing(4),\r\n    paddingTop: theme.spacing(4),\r\n    marginTop: theme.spacing(24),\r\n    paddingLeft: 48,\r\n    paddingRight: 48\r\n  },\r\n  textField: {\r\n    width: '100%'\r\n  },\r\n  submitBtn: {\r\n    marginTop: theme.spacing(4)\r\n  },\r\n  errorAlert: {\r\n    width: '100%',\r\n    backgroundColor: '#D84646',\r\n    color: 'white',\r\n    paddingBottom: 12,\r\n    paddingTop: 12,\r\n    paddingLeft: 48,\r\n    paddingRight: 48,\r\n    display: 'flex'\r\n  }\r\n}));\r\n\r\nconst Register: React.FC<RouteComponentProps> = ({ history }) => {\r\n  const classes = useStyles();\r\n\r\n  const firstName = useFormField('', 'text');\r\n  const lastName = useFormField('', 'text');\r\n  const email = useFormField('', 'email');\r\n  const password = useFormField('', 'text');\r\n\r\n  const [errors, setErrors] = useState('');\r\n\r\n  const [register] = useRegisterMutation();\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(e.target as HTMLFormElement);\r\n    const response = await register({\r\n      variables: {\r\n        firstName: formData.get('firstName') as string,\r\n        lastName: formData.get('lastName') as string,\r\n        email: formData.get('email') as string,\r\n        password: formData.get('password') as string\r\n      }\r\n    });\r\n\r\n    if (response && response.data && response.data.register.user) {\r\n      history.push('/');\r\n    } else if (response && response.data && response.data.register.errors) {\r\n      setErrors(response.data.register.errors[0].message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.registerPageContainer}>\r\n      <Paper elevation={3} className={classes.registerPaper}>\r\n        <Container maxWidth=\"md\">\r\n          <Typography variant=\"h3\" noWrap>Sign Up</Typography>\r\n          <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n            <div>\r\n              <TextField\r\n                id=\"input_firstName\"\r\n                label=\"First Name\"\r\n                name=\"firstName\"\r\n                className={classes.textField}\r\n                {...firstName}\r\n              />\r\n            </div>\r\n            <div>\r\n              <TextField\r\n                id=\"input_lastName\"\r\n                label=\"Last Name\"\r\n                name=\"lastName\"\r\n                className={classes.textField}\r\n                {...lastName}\r\n              />\r\n            </div>\r\n            <div>\r\n              <TextField\r\n                id=\"input_email\"\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                className={classes.textField}\r\n                {...email}\r\n              />\r\n            </div>\r\n            <div>\r\n              <TextField\r\n                id=\"input_password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                className={classes.textField}\r\n                {...password}\r\n              />\r\n            </div>\r\n            <Button className={classes.submitBtn} variant=\"contained\" color=\"primary\" type=\"submit\">Submit</Button>\r\n          </form>\r\n          <Snackbar open={!!errors && !!errors.length}>\r\n            <Paper variant=\"elevation\" className={classes.errorAlert}>\r\n              <Typography variant=\"h6\">{errors}</Typography>\r\n            </Paper>\r\n          </Snackbar>\r\n        </Container>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  TextField,\r\n  makeStyles,\r\n  Paper,\r\n  Container,\r\n  Typography,\r\n  Snackbar,\r\n} from '@material-ui/core';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { useFormField } from '../../hooks/use-form-field.hook';\r\nimport { useLoginMutation } from '../../generated/graphql';\r\nimport { currentUserProfileVar, loggedInUserProfileVar } from '../../cache';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  loginPageContainer: {\r\n    height: '100vh',\r\n  },\r\n  loginPaper: {\r\n    width: '40%',\r\n    margin: '0 auto',\r\n    paddingBottom: theme.spacing(4),\r\n    paddingTop: theme.spacing(4),\r\n    marginTop: theme.spacing(24),\r\n    paddingLeft: 48,\r\n    paddingRight: 48\r\n  },\r\n  textField: {\r\n    width: '100%'\r\n  },\r\n  submitBtn: {\r\n    marginTop: theme.spacing(4)\r\n  },\r\n  errorAlert: {\r\n    width: '100%',\r\n    backgroundColor: '#D84646',\r\n    color: 'white',\r\n    paddingBottom: 12,\r\n    paddingTop: 12,\r\n    paddingLeft: 48,\r\n    paddingRight: 48,\r\n    display: 'flex'\r\n  }\r\n}));\r\n\r\nconst Login: React.FC<RouteComponentProps> = ({ history }) => {\r\n  const classes = useStyles();\r\n\r\n  const email = useFormField('', 'email');\r\n  const password = useFormField('', 'text');\r\n\r\n  const [errors, setErrors] = useState('');\r\n\r\n  const [login] = useLoginMutation();\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(e.target as HTMLFormElement);\r\n    const response = await login({\r\n      variables: {\r\n        email: formData.get('email') as string,\r\n        password: formData.get('password') as string\r\n      }\r\n    });\r\n\r\n    if (response && response.data && response.data.login.user) {\r\n      currentUserProfileVar(response.data.login.user as any); /* this updates the local Apollo state in the cache for the currentUserProfileVar\r\n        reactive variable. Instead of using routing to open a user profile, I'll be using local state to determine\r\n        which user posts to display. In primaryAppBar, when a user is searched for and selected, currentUserProfileVar\r\n        is updated, causing the useGetUserPostsQuery to call with a new userId. */\r\n        loggedInUserProfileVar(response.data.login.user as any);\r\n      history.push('/');\r\n    } \r\n    else if (response && response.data && response.data.login.errors) {\r\n      setErrors(response.data.login.errors[0].message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.loginPageContainer}>\r\n      <Paper elevation={3} className={classes.loginPaper}>\r\n        <Container maxWidth=\"md\">\r\n          <Typography variant=\"h3\" noWrap>Log In</Typography>\r\n          <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n            <div>\r\n              <TextField\r\n                id=\"input-email\"\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                className={classes.textField}\r\n                {...email}\r\n              />\r\n            </div>\r\n            <div>\r\n              <TextField\r\n                id=\"input-password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                className={classes.textField}\r\n                {...password}\r\n              />\r\n            </div>\r\n            <Button className={classes.submitBtn} variant=\"contained\" color=\"primary\" type=\"submit\">Submit</Button>\r\n          </form>\r\n          <Snackbar open={!!errors && !!errors.length}>\r\n            <Paper variant=\"elevation\" className={classes.errorAlert}>\r\n              <Typography variant=\"h6\">{errors}</Typography>\r\n            </Paper>\r\n          </Snackbar>\r\n        </Container>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","import React, { useEffect } from 'react';\r\nimport { Backdrop, CircularProgress, Container, makeStyles, Typography } from '@material-ui/core';\r\nimport { useLazyQuery, useReactiveVar } from '@apollo/client';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { currentGetUserPostsCursorVar, currentUserProfileVar, loggedInUserProfileVar } from '../../cache';\r\nimport UserFollowsContainer from '../../containers/user-follows-container';\r\nimport PostInputContainer from '../../containers/post-input-container';\r\nimport PostListContainer from '../../containers/post-list-container';\r\nimport { OFFSET_LIMIT } from '../../hooks/use-scroll.hook';\r\nimport { GetUserPostsDocument, User } from '../../generated/graphql';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  homePageContainer: {\r\n    minHeight: '100vh'\r\n  },\r\n  currentUserInfoContainer: {\r\n    marginBottom: 30\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst Profile: React.FC<RouteComponentProps> = ({ history }) => {\r\n  const classes = useStyles();\r\n\r\n  const loggedInUser: User = useReactiveVar(loggedInUserProfileVar);\r\n  const currentUserProfile: User = useReactiveVar(currentUserProfileVar);\r\n\r\n  const [getUserPosts, { loading }] = useLazyQuery(GetUserPostsDocument, {\r\n    fetchPolicy: 'network-only',\r\n    onError: (err) => console.log('get user posts lazy query error', err),\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    currentGetUserPostsCursorVar(0);\r\n    getUserPosts({\r\n      variables: {\r\n        userId: currentUserProfile.id,\r\n        cursor: 0,\r\n        offsetLimit: OFFSET_LIMIT,\r\n        isGettingNewsfeed: false\r\n      },\r\n    });\r\n  }, [getUserPosts, currentUserProfile]);\r\n\r\n  return (\r\n    <div className={classes.homePageContainer}>\r\n      <Container maxWidth=\"sm\">\r\n        <div className={classes.currentUserInfoContainer}>\r\n          <Typography variant=\"h4\">\r\n            {`${currentUserProfile.firstName} ${currentUserProfile.lastName}'s Profile`}\r\n          </Typography>\r\n          <UserFollowsContainer\r\n            loggedInUser={loggedInUser.id}\r\n            userToBeFollowed={currentUserProfile.id}\r\n          />\r\n        </div>\r\n        <PostInputContainer />\r\n        <PostListContainer isGettingNewsfeed={false} />\r\n      </Container>\r\n      <Backdrop className={classes.backdrop} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { ListItem, ListItemText, makeStyles } from '@material-ui/core';\r\n\r\ninterface Props {\r\n  handleLogoutClick: () => any\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  logoutItemText: {\r\n    fontWeight: 'bold',\r\n    color: '#fff'\r\n  }\r\n}));\r\n\r\nconst Logout: React.FC<Props> = ({ handleLogoutClick }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ListItem button onClick={handleLogoutClick}>\r\n      <ListItemText className={classes.logoutItemText} primary=\"Logout\" />\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default Logout;","import React from 'react';\r\nimport { useLogoutMutation } from '../../generated/graphql';\r\nimport { loggedInUserProfileVar } from '../../cache';\r\nimport User from '../../types/user.interface';\r\nimport Logout from '../../components/logout';\r\n\r\ninterface Props {}\r\n\r\nconst LogoutContainer: React.FC<Props> = () => {\r\n  const [logout, { client }] = useLogoutMutation();\r\n\r\n  const handleLogoutClick = async () => {\r\n    await logout();\r\n    loggedInUserProfileVar(new User(0, '', '', ''));\r\n    await client.resetStore(); // resets the apollo client store\r\n  };\r\n\r\n  return (\r\n    <Logout handleLogoutClick={handleLogoutClick} />\r\n  );\r\n}\r\n\r\nexport default LogoutContainer;","import React, { useState } from 'react';\r\nimport { Divider, Drawer, List, ListItem, ListItemText, makeStyles, IconButton } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport LogoutContainer from '../../containers/logout-container';\r\n\r\ninterface Props {\r\n  handleHomePageClick: () => void;\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    backgroundColor: '#424242'\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  menuIcon: {\r\n    fill: '#fff'\r\n  },\r\n  menuItemText: {\r\n    fontWeight: 'bold',\r\n    color: '#fff'\r\n  }\r\n}));\r\n\r\nconst NavBar = ({ handleHomePageClick }: Props) => {\r\n  const classes = useStyles();\r\n  const [isNavDrawerOpen, setIsNavDrawerOpen] = useState(false);\r\n\r\n  const toggleDrawer = (open: boolean) => {\r\n    setIsNavDrawerOpen(open);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton onClick={() => toggleDrawer(true)}>\r\n        <Menu className={classes.menuIcon} />\r\n      </IconButton>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        open={isNavDrawerOpen}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        onClose={() => toggleDrawer(false)}\r\n        anchor=\"left\"\r\n      >\r\n        <div className={classes.toolbar} />\r\n        <Divider />\r\n        <List>\r\n          <Link to=\"/\" onClick={handleHomePageClick}>\r\n            <ListItem button>\r\n              <ListItemText className={classes.menuItemText} primary=\"Home\" />\r\n            </ListItem>\r\n          </Link>\r\n          <Link to=\"/profile\">\r\n            <ListItem button>\r\n              <ListItemText className={classes.menuItemText} primary=\"Profile\" />\r\n            </ListItem>\r\n          </Link>\r\n          <Link to=\"/register\">\r\n            <ListItem button>\r\n              <ListItemText className={classes.menuItemText} primary=\"Register\" />\r\n            </ListItem>\r\n          </Link>\r\n          <Link to=\"/login\">\r\n            <ListItem button>\r\n              <ListItemText className={classes.menuItemText} primary=\"Login\" />\r\n            </ListItem>\r\n          </Link>\r\n          <LogoutContainer />\r\n        </List>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React, { ChangeEvent, useEffect, useRef, useState } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { Search } from '@material-ui/icons';\r\nimport { alpha, makeStyles } from '@material-ui/core/styles';\r\nimport { ClickAwayListener, Grow, MenuItem, MenuList, Paper, Popper } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport NavBar from '../navbar';\r\nimport { User } from '../../generated/graphql';\r\n\r\ninterface Props {\r\n  searchUsers: any;\r\n  data?: any;\r\n  loggedInUser?: User; \r\n  handleMenuClick: (user: User, handleClose: () => void) => void;\r\n  handleHomePageClick: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n    marginBottom: 36\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n    color: 'white',\r\n    textDecoration: 'none'\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: 0,\r\n    marginLeft: 'auto',\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '20ch',\r\n    },\r\n  },\r\n  sectionDesktop: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  paper: {\r\n    marginRight: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst PrimaryAppBar: React.FC<Props> = ({\r\n  handleMenuClick,\r\n  handleHomePageClick,\r\n  searchUsers,\r\n  data,\r\n  loggedInUser\r\n}: Props) => {\r\n  const classes = useStyles();\r\n\r\n  const [value, setValue] = useState('');\r\n  const [open, setOpen] = useState(false);\r\n  const anchorRef: any = useRef(null);\r\n\r\n  useEffect(() => {\r\n    searchUsers({\r\n      variables: {\r\n        name: value\r\n      }\r\n    });\r\n  }, [value, searchUsers])\r\n\r\n  const handleOpen = (): void => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (): void => {\r\n    setOpen(false);\r\n  };\r\n\r\n  function handleListKeyDown(event: any) {\r\n    if (event.key === 'Tab') {\r\n      event.preventDefault();\r\n      setOpen(false);\r\n    }\r\n  }\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n    setValue(e.target.value);\r\n    if (data) {\r\n      handleOpen();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <NavBar handleHomePageClick={handleHomePageClick} />\r\n          <Link to=\"/\" onClick={handleHomePageClick}>\r\n            <Typography className={classes.title} variant=\"h6\" noWrap>\r\n              Bloglet\r\n            </Typography>\r\n          </Link>\r\n          {(loggedInUser && loggedInUser.id) ? <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <Search />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              onChange={handleChange}\r\n              value={value}\r\n              ref={anchorRef}\r\n            />\r\n            <Popper\r\n              open={open}\r\n              anchorEl={anchorRef.current}\r\n              role={undefined}\r\n              transition\r\n              disablePortal\r\n              style={{\r\n                zIndex: 2,\r\n                width: anchorRef && anchorRef.current ? anchorRef.current.offsetWidth : 100\r\n              }}\r\n            >\r\n              {({ TransitionProps, placement }) => (\r\n                <Grow\r\n                  {...TransitionProps}\r\n                  style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\r\n                >\r\n                  <Paper>\r\n                    <ClickAwayListener onClickAway={handleClose}>\r\n                      <MenuList id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\r\n                        {data && data.searchUsers?.map(\r\n                          (user: any, index: number) => (\r\n                            <Link to=\"/\" key={index}>\r\n                              <MenuItem key={index} onClick={() => handleMenuClick(user, handleClose)}>\r\n                                {user.firstName} {user.lastName}\r\n                              </MenuItem>\r\n                            </Link>\r\n                          )\r\n                        )}\r\n                      </MenuList>\r\n                    </ClickAwayListener>\r\n                  </Paper>\r\n                </Grow>\r\n              )}\r\n            </Popper>\r\n          </div> : null}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PrimaryAppBar;","import React from 'react';\r\nimport { useMutation, useReactiveVar } from '@apollo/client';\r\nimport { useHistory } from 'react-router-dom';\r\nimport PrimaryAppBar from '../../components/primary-app-bar';\r\nimport { User, useSearchUsersLazyQuery } from '../../generated/graphql';\r\nimport clearUserPosts from '../../cache-queries/clear-user-posts';\r\nimport { currentGetUserPostsCursorVar, currentUserProfileVar, loggedInUserProfileVar } from '../../cache';\r\n\r\nconst PrimaryAppBarContainer = () => {\r\n  const history = useHistory();\r\n\r\n  const loggedInUser: User = useReactiveVar(loggedInUserProfileVar);\r\n\r\n  const [clearPosts] = useMutation(clearUserPosts, {\r\n    update(cache) {\r\n      cache.modify({\r\n        fields: {\r\n          getUserPosts() {\r\n            return [];\r\n          }\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  const [searchUsers, { data }] = useSearchUsersLazyQuery();\r\n\r\n  const handleMenuClick = (user: User, handleClose: () => void): void => {\r\n    currentUserProfileVar(user);\r\n    currentGetUserPostsCursorVar(0);\r\n    clearPosts();\r\n    handleClose();\r\n    setTimeout(() => {\r\n      history.push('/profile');\r\n    }, 0);\r\n  };\r\n\r\n  const handleHomePageClick = () => {\r\n    currentUserProfileVar(loggedInUser);\r\n  };\r\n\r\n  return (\r\n    <PrimaryAppBar\r\n      searchUsers={searchUsers}\r\n      data={data}\r\n      loggedInUser={loggedInUser}\r\n      handleMenuClick={handleMenuClick}\r\n      handleHomePageClick={handleHomePageClick}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PrimaryAppBarContainer;","import './App.css';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Home from './pages/home';\r\nimport Register from './pages/register';\r\nimport Login from './pages/login';\r\nimport Profile from './pages/profile';\r\nimport PrimaryAppBarContainer from './containers/primary-app-bar-container';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n  }\r\n}));\r\n\r\nconst Routes = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <main className={classes.content}>\r\n        <PrimaryAppBarContainer />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/profile\" component={Profile} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n        </Switch>\r\n      </main>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { ApolloClient, createHttpLink, from } from '@apollo/client';\r\nimport { onError } from \"@apollo/client/link/error\";\r\nimport Routes from './Routes';\r\nimport './index.css';\r\nimport cache from './cache';\r\n\r\nconst httpLink = createHttpLink({\r\n  // Use IP address of droplet with the exposed port that server container runs on\r\n  uri: `https://shrouded-sierra-25706-554993cb2282.herokuapp.com/graphql`,\r\n  credentials: 'include' // need this so that cookie gets set after login response,\r\n});\r\n\r\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\r\n  if (graphQLErrors)\r\n    graphQLErrors.forEach(({ message, locations, path }) =>\r\n      console.log(\r\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\r\n      ),\r\n    );\r\n\r\n  if (networkError) console.log(`[Network error]: ${networkError}`);\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: from([ errorLink, httpLink ]),\r\n  cache,\r\n});\r\n\r\n/* ApolloProvider acts similar to React Context and passes the client connection\r\ninto all the child components */\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <Routes />\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}